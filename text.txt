Django orm

cat.recipe_set.all() == related_name
distinct
values values_list
get_or_update()
Recipe.objects.aggregate(Sum('id))
Recipe.objects.aggregate(Min('id))
Recipe.objects.aggregate(Max('id))
Recipe.objects.aggregate(Avg('id))




shell

product = Product.objects.filter(versions__color__name="White").first()
versions=product.versions
versions.all()
versions.first()
versions.first().details.all()
version_details_count=versions.first().details.aggregate(count=Count('count'))
version_details_sum = versions.first().details.aggregate(sum=Sum('count'))

a = ProductVersion.objects.all()
each_versions_expected_revenue
for b in a:
    print(b.details.all())
    sell_price=b.sell_price
    sum = b.details.aggregate(sum=Sum('count'))['sum']
    each_versions_expected_revenue=(sell_price*sum)
    print(each_versions_expected_revenue)


product.versions.all().values_list('sell_price') 
product.versions.aggregate(sum=Sum('sell_price'))  returns certain product's sell prices
version = ProductVersion.objects.filter(color__name="White").first()
version.details.aggregate(sum=Sum('count'))


brands = Brand.objects.all()
for brand in brands:
    brand_total=0
    for product in brand.products.all():
        brand_total += product.versions.count() 
    print( brand.name ,brand_total)



print(b.get_price_display())

For version
version = ProductVersion.objects.filter(Q(color__name="White")&Q(product__name="Sneaker"))
fv = version.first()
fv.reviews.count()
total_sum = fv.reviews.annotate(sum=F("price")+F("value")+F("quality"))
for t in total_sum:
     all_total_sum+=t.sum
avarage_rating = (all_total_sum*20)/(fv.reviews.count()*3)


brand_product_count

brand = Brand.objects.filter(name="Pull&Bear").first()
products = brand.products.all()
products.aggregate(versions=Count('versions'))['versions']



Celery Redis

docker ps -a
docker exec -it b11bd77797fe /bin/sh

python -m celery -A SuperB  worker -l info
python -m celery -A SuperB worker -l info --without-gossip --without-mingle --without-heartbeat -Ofair --pool=solo

Celery Beat for periodic or scheduled tasks

celery -A SuperB beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

To work with tasks both have to be used
celery -A SuperB beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
celery -A SuperB worker --pool=solo -l info

Template tags and filters
{{ text|truncatewords:"2" }}
{{ text|truncatechars:"2" }}


templatetags -> custom_tags.py

from django.template import Library
from Order.models import Basket_items

register = LibrarY()
@register.simple_tag
def get_basket_items():
    return Basket_items.objects.all()

{% load custom_tags %}

{% get_basket_items as basket_items %}
{% for basket_item in basket_items %}


py manage.py clearcache 